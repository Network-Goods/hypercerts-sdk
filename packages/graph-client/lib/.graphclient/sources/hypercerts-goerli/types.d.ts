import { InContextSdkMethod } from '@graphql-mesh/types';
import { MeshContext } from '@graphql-mesh/runtime';
export declare namespace HypercertsGoerliTypes {
    type Maybe<T> = T | null;
    type InputMaybe<T> = Maybe<T>;
    type Exact<T extends {
        [key: string]: unknown;
    }> = {
        [K in keyof T]: T[K];
    };
    type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
        [SubKey in K]?: Maybe<T[SubKey]>;
    };
    type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
        [SubKey in K]: Maybe<T[SubKey]>;
    };
    type Scalars = {
        ID: string;
        String: string;
        Boolean: boolean;
        Int: number;
        Float: number;
        BigDecimal: any;
        BigInt: any;
        Bytes: any;
    };
    type BlockChangedFilter = {
        number_gte: Scalars['Int'];
    };
    type Block_height = {
        hash?: InputMaybe<Scalars['Bytes']>;
        number?: InputMaybe<Scalars['Int']>;
        number_gte?: InputMaybe<Scalars['Int']>;
    };
    type Contributor = {
        id: Scalars['ID'];
        hypercerts: Array<Hypercert>;
    };
    type ContributorhypercertsArgs = {
        skip?: InputMaybe<Scalars['Int']>;
        first?: InputMaybe<Scalars['Int']>;
        orderBy?: InputMaybe<Hypercert_orderBy>;
        orderDirection?: InputMaybe<OrderDirection>;
        where?: InputMaybe<Hypercert_filter>;
    };
    type Contributor_filter = {
        id?: InputMaybe<Scalars['ID']>;
        id_not?: InputMaybe<Scalars['ID']>;
        id_gt?: InputMaybe<Scalars['ID']>;
        id_lt?: InputMaybe<Scalars['ID']>;
        id_gte?: InputMaybe<Scalars['ID']>;
        id_lte?: InputMaybe<Scalars['ID']>;
        id_in?: InputMaybe<Array<Scalars['ID']>>;
        id_not_in?: InputMaybe<Array<Scalars['ID']>>;
        hypercerts_?: InputMaybe<Hypercert_filter>;
        _change_block?: InputMaybe<BlockChangedFilter>;
    };
    type Contributor_orderBy = 'id' | 'hypercerts';
    type Hypercert = {
        id: Scalars['ID'];
        claimHash: Scalars['Bytes'];
        minter: Scalars['String'];
        contributors: Array<Contributor>;
        impactDateFrom: Scalars['BigInt'];
        impactDateTo: Scalars['BigInt'];
        impactScopes: Array<ImpactScope>;
        workDateFrom: Scalars['BigInt'];
        workDateTo: Scalars['BigInt'];
        workScopes: Array<WorkScope>;
        rights: Array<Right>;
        uri: Scalars['String'];
        metadata: Scalars['String'];
        totalUnits: Scalars['BigInt'];
        fractions: Array<HypercertFraction>;
        lastUpdated: Scalars['BigInt'];
        version: Scalars['BigInt'];
    };
    type HypercertcontributorsArgs = {
        skip?: InputMaybe<Scalars['Int']>;
        first?: InputMaybe<Scalars['Int']>;
        orderBy?: InputMaybe<Contributor_orderBy>;
        orderDirection?: InputMaybe<OrderDirection>;
        where?: InputMaybe<Contributor_filter>;
    };
    type HypercertimpactScopesArgs = {
        skip?: InputMaybe<Scalars['Int']>;
        first?: InputMaybe<Scalars['Int']>;
        orderBy?: InputMaybe<ImpactScope_orderBy>;
        orderDirection?: InputMaybe<OrderDirection>;
        where?: InputMaybe<ImpactScope_filter>;
    };
    type HypercertworkScopesArgs = {
        skip?: InputMaybe<Scalars['Int']>;
        first?: InputMaybe<Scalars['Int']>;
        orderBy?: InputMaybe<WorkScope_orderBy>;
        orderDirection?: InputMaybe<OrderDirection>;
        where?: InputMaybe<WorkScope_filter>;
    };
    type HypercertrightsArgs = {
        skip?: InputMaybe<Scalars['Int']>;
        first?: InputMaybe<Scalars['Int']>;
        orderBy?: InputMaybe<Right_orderBy>;
        orderDirection?: InputMaybe<OrderDirection>;
        where?: InputMaybe<Right_filter>;
    };
    type HypercertfractionsArgs = {
        skip?: InputMaybe<Scalars['Int']>;
        first?: InputMaybe<Scalars['Int']>;
        orderBy?: InputMaybe<HypercertFraction_orderBy>;
        orderDirection?: InputMaybe<OrderDirection>;
        where?: InputMaybe<HypercertFraction_filter>;
    };
    type HypercertFraction = {
        id: Scalars['ID'];
        owner: Owner;
        units: Scalars['BigInt'];
        hypercert: Hypercert;
    };
    type HypercertFraction_filter = {
        id?: InputMaybe<Scalars['ID']>;
        id_not?: InputMaybe<Scalars['ID']>;
        id_gt?: InputMaybe<Scalars['ID']>;
        id_lt?: InputMaybe<Scalars['ID']>;
        id_gte?: InputMaybe<Scalars['ID']>;
        id_lte?: InputMaybe<Scalars['ID']>;
        id_in?: InputMaybe<Array<Scalars['ID']>>;
        id_not_in?: InputMaybe<Array<Scalars['ID']>>;
        owner?: InputMaybe<Scalars['String']>;
        owner_not?: InputMaybe<Scalars['String']>;
        owner_gt?: InputMaybe<Scalars['String']>;
        owner_lt?: InputMaybe<Scalars['String']>;
        owner_gte?: InputMaybe<Scalars['String']>;
        owner_lte?: InputMaybe<Scalars['String']>;
        owner_in?: InputMaybe<Array<Scalars['String']>>;
        owner_not_in?: InputMaybe<Array<Scalars['String']>>;
        owner_contains?: InputMaybe<Scalars['String']>;
        owner_contains_nocase?: InputMaybe<Scalars['String']>;
        owner_not_contains?: InputMaybe<Scalars['String']>;
        owner_not_contains_nocase?: InputMaybe<Scalars['String']>;
        owner_starts_with?: InputMaybe<Scalars['String']>;
        owner_starts_with_nocase?: InputMaybe<Scalars['String']>;
        owner_not_starts_with?: InputMaybe<Scalars['String']>;
        owner_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
        owner_ends_with?: InputMaybe<Scalars['String']>;
        owner_ends_with_nocase?: InputMaybe<Scalars['String']>;
        owner_not_ends_with?: InputMaybe<Scalars['String']>;
        owner_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
        owner_?: InputMaybe<Owner_filter>;
        units?: InputMaybe<Scalars['BigInt']>;
        units_not?: InputMaybe<Scalars['BigInt']>;
        units_gt?: InputMaybe<Scalars['BigInt']>;
        units_lt?: InputMaybe<Scalars['BigInt']>;
        units_gte?: InputMaybe<Scalars['BigInt']>;
        units_lte?: InputMaybe<Scalars['BigInt']>;
        units_in?: InputMaybe<Array<Scalars['BigInt']>>;
        units_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
        hypercert?: InputMaybe<Scalars['String']>;
        hypercert_not?: InputMaybe<Scalars['String']>;
        hypercert_gt?: InputMaybe<Scalars['String']>;
        hypercert_lt?: InputMaybe<Scalars['String']>;
        hypercert_gte?: InputMaybe<Scalars['String']>;
        hypercert_lte?: InputMaybe<Scalars['String']>;
        hypercert_in?: InputMaybe<Array<Scalars['String']>>;
        hypercert_not_in?: InputMaybe<Array<Scalars['String']>>;
        hypercert_contains?: InputMaybe<Scalars['String']>;
        hypercert_contains_nocase?: InputMaybe<Scalars['String']>;
        hypercert_not_contains?: InputMaybe<Scalars['String']>;
        hypercert_not_contains_nocase?: InputMaybe<Scalars['String']>;
        hypercert_starts_with?: InputMaybe<Scalars['String']>;
        hypercert_starts_with_nocase?: InputMaybe<Scalars['String']>;
        hypercert_not_starts_with?: InputMaybe<Scalars['String']>;
        hypercert_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
        hypercert_ends_with?: InputMaybe<Scalars['String']>;
        hypercert_ends_with_nocase?: InputMaybe<Scalars['String']>;
        hypercert_not_ends_with?: InputMaybe<Scalars['String']>;
        hypercert_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
        hypercert_?: InputMaybe<Hypercert_filter>;
        _change_block?: InputMaybe<BlockChangedFilter>;
    };
    type HypercertFraction_orderBy = 'id' | 'owner' | 'units' | 'hypercert';
    type Hypercert_filter = {
        id?: InputMaybe<Scalars['ID']>;
        id_not?: InputMaybe<Scalars['ID']>;
        id_gt?: InputMaybe<Scalars['ID']>;
        id_lt?: InputMaybe<Scalars['ID']>;
        id_gte?: InputMaybe<Scalars['ID']>;
        id_lte?: InputMaybe<Scalars['ID']>;
        id_in?: InputMaybe<Array<Scalars['ID']>>;
        id_not_in?: InputMaybe<Array<Scalars['ID']>>;
        claimHash?: InputMaybe<Scalars['Bytes']>;
        claimHash_not?: InputMaybe<Scalars['Bytes']>;
        claimHash_in?: InputMaybe<Array<Scalars['Bytes']>>;
        claimHash_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
        claimHash_contains?: InputMaybe<Scalars['Bytes']>;
        claimHash_not_contains?: InputMaybe<Scalars['Bytes']>;
        minter?: InputMaybe<Scalars['String']>;
        minter_not?: InputMaybe<Scalars['String']>;
        minter_gt?: InputMaybe<Scalars['String']>;
        minter_lt?: InputMaybe<Scalars['String']>;
        minter_gte?: InputMaybe<Scalars['String']>;
        minter_lte?: InputMaybe<Scalars['String']>;
        minter_in?: InputMaybe<Array<Scalars['String']>>;
        minter_not_in?: InputMaybe<Array<Scalars['String']>>;
        minter_contains?: InputMaybe<Scalars['String']>;
        minter_contains_nocase?: InputMaybe<Scalars['String']>;
        minter_not_contains?: InputMaybe<Scalars['String']>;
        minter_not_contains_nocase?: InputMaybe<Scalars['String']>;
        minter_starts_with?: InputMaybe<Scalars['String']>;
        minter_starts_with_nocase?: InputMaybe<Scalars['String']>;
        minter_not_starts_with?: InputMaybe<Scalars['String']>;
        minter_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
        minter_ends_with?: InputMaybe<Scalars['String']>;
        minter_ends_with_nocase?: InputMaybe<Scalars['String']>;
        minter_not_ends_with?: InputMaybe<Scalars['String']>;
        minter_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
        contributors?: InputMaybe<Array<Scalars['String']>>;
        contributors_not?: InputMaybe<Array<Scalars['String']>>;
        contributors_contains?: InputMaybe<Array<Scalars['String']>>;
        contributors_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
        contributors_not_contains?: InputMaybe<Array<Scalars['String']>>;
        contributors_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
        contributors_?: InputMaybe<Contributor_filter>;
        impactDateFrom?: InputMaybe<Scalars['BigInt']>;
        impactDateFrom_not?: InputMaybe<Scalars['BigInt']>;
        impactDateFrom_gt?: InputMaybe<Scalars['BigInt']>;
        impactDateFrom_lt?: InputMaybe<Scalars['BigInt']>;
        impactDateFrom_gte?: InputMaybe<Scalars['BigInt']>;
        impactDateFrom_lte?: InputMaybe<Scalars['BigInt']>;
        impactDateFrom_in?: InputMaybe<Array<Scalars['BigInt']>>;
        impactDateFrom_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
        impactDateTo?: InputMaybe<Scalars['BigInt']>;
        impactDateTo_not?: InputMaybe<Scalars['BigInt']>;
        impactDateTo_gt?: InputMaybe<Scalars['BigInt']>;
        impactDateTo_lt?: InputMaybe<Scalars['BigInt']>;
        impactDateTo_gte?: InputMaybe<Scalars['BigInt']>;
        impactDateTo_lte?: InputMaybe<Scalars['BigInt']>;
        impactDateTo_in?: InputMaybe<Array<Scalars['BigInt']>>;
        impactDateTo_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
        impactScopes?: InputMaybe<Array<Scalars['String']>>;
        impactScopes_not?: InputMaybe<Array<Scalars['String']>>;
        impactScopes_contains?: InputMaybe<Array<Scalars['String']>>;
        impactScopes_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
        impactScopes_not_contains?: InputMaybe<Array<Scalars['String']>>;
        impactScopes_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
        impactScopes_?: InputMaybe<ImpactScope_filter>;
        workDateFrom?: InputMaybe<Scalars['BigInt']>;
        workDateFrom_not?: InputMaybe<Scalars['BigInt']>;
        workDateFrom_gt?: InputMaybe<Scalars['BigInt']>;
        workDateFrom_lt?: InputMaybe<Scalars['BigInt']>;
        workDateFrom_gte?: InputMaybe<Scalars['BigInt']>;
        workDateFrom_lte?: InputMaybe<Scalars['BigInt']>;
        workDateFrom_in?: InputMaybe<Array<Scalars['BigInt']>>;
        workDateFrom_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
        workDateTo?: InputMaybe<Scalars['BigInt']>;
        workDateTo_not?: InputMaybe<Scalars['BigInt']>;
        workDateTo_gt?: InputMaybe<Scalars['BigInt']>;
        workDateTo_lt?: InputMaybe<Scalars['BigInt']>;
        workDateTo_gte?: InputMaybe<Scalars['BigInt']>;
        workDateTo_lte?: InputMaybe<Scalars['BigInt']>;
        workDateTo_in?: InputMaybe<Array<Scalars['BigInt']>>;
        workDateTo_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
        workScopes?: InputMaybe<Array<Scalars['String']>>;
        workScopes_not?: InputMaybe<Array<Scalars['String']>>;
        workScopes_contains?: InputMaybe<Array<Scalars['String']>>;
        workScopes_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
        workScopes_not_contains?: InputMaybe<Array<Scalars['String']>>;
        workScopes_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
        workScopes_?: InputMaybe<WorkScope_filter>;
        rights?: InputMaybe<Array<Scalars['String']>>;
        rights_not?: InputMaybe<Array<Scalars['String']>>;
        rights_contains?: InputMaybe<Array<Scalars['String']>>;
        rights_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
        rights_not_contains?: InputMaybe<Array<Scalars['String']>>;
        rights_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
        rights_?: InputMaybe<Right_filter>;
        uri?: InputMaybe<Scalars['String']>;
        uri_not?: InputMaybe<Scalars['String']>;
        uri_gt?: InputMaybe<Scalars['String']>;
        uri_lt?: InputMaybe<Scalars['String']>;
        uri_gte?: InputMaybe<Scalars['String']>;
        uri_lte?: InputMaybe<Scalars['String']>;
        uri_in?: InputMaybe<Array<Scalars['String']>>;
        uri_not_in?: InputMaybe<Array<Scalars['String']>>;
        uri_contains?: InputMaybe<Scalars['String']>;
        uri_contains_nocase?: InputMaybe<Scalars['String']>;
        uri_not_contains?: InputMaybe<Scalars['String']>;
        uri_not_contains_nocase?: InputMaybe<Scalars['String']>;
        uri_starts_with?: InputMaybe<Scalars['String']>;
        uri_starts_with_nocase?: InputMaybe<Scalars['String']>;
        uri_not_starts_with?: InputMaybe<Scalars['String']>;
        uri_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
        uri_ends_with?: InputMaybe<Scalars['String']>;
        uri_ends_with_nocase?: InputMaybe<Scalars['String']>;
        uri_not_ends_with?: InputMaybe<Scalars['String']>;
        uri_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
        metadata?: InputMaybe<Scalars['String']>;
        metadata_not?: InputMaybe<Scalars['String']>;
        metadata_gt?: InputMaybe<Scalars['String']>;
        metadata_lt?: InputMaybe<Scalars['String']>;
        metadata_gte?: InputMaybe<Scalars['String']>;
        metadata_lte?: InputMaybe<Scalars['String']>;
        metadata_in?: InputMaybe<Array<Scalars['String']>>;
        metadata_not_in?: InputMaybe<Array<Scalars['String']>>;
        metadata_contains?: InputMaybe<Scalars['String']>;
        metadata_contains_nocase?: InputMaybe<Scalars['String']>;
        metadata_not_contains?: InputMaybe<Scalars['String']>;
        metadata_not_contains_nocase?: InputMaybe<Scalars['String']>;
        metadata_starts_with?: InputMaybe<Scalars['String']>;
        metadata_starts_with_nocase?: InputMaybe<Scalars['String']>;
        metadata_not_starts_with?: InputMaybe<Scalars['String']>;
        metadata_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
        metadata_ends_with?: InputMaybe<Scalars['String']>;
        metadata_ends_with_nocase?: InputMaybe<Scalars['String']>;
        metadata_not_ends_with?: InputMaybe<Scalars['String']>;
        metadata_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
        totalUnits?: InputMaybe<Scalars['BigInt']>;
        totalUnits_not?: InputMaybe<Scalars['BigInt']>;
        totalUnits_gt?: InputMaybe<Scalars['BigInt']>;
        totalUnits_lt?: InputMaybe<Scalars['BigInt']>;
        totalUnits_gte?: InputMaybe<Scalars['BigInt']>;
        totalUnits_lte?: InputMaybe<Scalars['BigInt']>;
        totalUnits_in?: InputMaybe<Array<Scalars['BigInt']>>;
        totalUnits_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
        fractions_?: InputMaybe<HypercertFraction_filter>;
        lastUpdated?: InputMaybe<Scalars['BigInt']>;
        lastUpdated_not?: InputMaybe<Scalars['BigInt']>;
        lastUpdated_gt?: InputMaybe<Scalars['BigInt']>;
        lastUpdated_lt?: InputMaybe<Scalars['BigInt']>;
        lastUpdated_gte?: InputMaybe<Scalars['BigInt']>;
        lastUpdated_lte?: InputMaybe<Scalars['BigInt']>;
        lastUpdated_in?: InputMaybe<Array<Scalars['BigInt']>>;
        lastUpdated_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
        version?: InputMaybe<Scalars['BigInt']>;
        version_not?: InputMaybe<Scalars['BigInt']>;
        version_gt?: InputMaybe<Scalars['BigInt']>;
        version_lt?: InputMaybe<Scalars['BigInt']>;
        version_gte?: InputMaybe<Scalars['BigInt']>;
        version_lte?: InputMaybe<Scalars['BigInt']>;
        version_in?: InputMaybe<Array<Scalars['BigInt']>>;
        version_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
        _change_block?: InputMaybe<BlockChangedFilter>;
    };
    type Hypercert_orderBy = 'id' | 'claimHash' | 'minter' | 'contributors' | 'impactDateFrom' | 'impactDateTo' | 'impactScopes' | 'workDateFrom' | 'workDateTo' | 'workScopes' | 'rights' | 'uri' | 'metadata' | 'totalUnits' | 'fractions' | 'lastUpdated' | 'version';
    type ImpactScope = {
        id: Scalars['ID'];
        text: Scalars['String'];
        hypercerts: Array<Hypercert>;
    };
    type ImpactScopehypercertsArgs = {
        skip?: InputMaybe<Scalars['Int']>;
        first?: InputMaybe<Scalars['Int']>;
        orderBy?: InputMaybe<Hypercert_orderBy>;
        orderDirection?: InputMaybe<OrderDirection>;
        where?: InputMaybe<Hypercert_filter>;
    };
    type ImpactScope_filter = {
        id?: InputMaybe<Scalars['ID']>;
        id_not?: InputMaybe<Scalars['ID']>;
        id_gt?: InputMaybe<Scalars['ID']>;
        id_lt?: InputMaybe<Scalars['ID']>;
        id_gte?: InputMaybe<Scalars['ID']>;
        id_lte?: InputMaybe<Scalars['ID']>;
        id_in?: InputMaybe<Array<Scalars['ID']>>;
        id_not_in?: InputMaybe<Array<Scalars['ID']>>;
        text?: InputMaybe<Scalars['String']>;
        text_not?: InputMaybe<Scalars['String']>;
        text_gt?: InputMaybe<Scalars['String']>;
        text_lt?: InputMaybe<Scalars['String']>;
        text_gte?: InputMaybe<Scalars['String']>;
        text_lte?: InputMaybe<Scalars['String']>;
        text_in?: InputMaybe<Array<Scalars['String']>>;
        text_not_in?: InputMaybe<Array<Scalars['String']>>;
        text_contains?: InputMaybe<Scalars['String']>;
        text_contains_nocase?: InputMaybe<Scalars['String']>;
        text_not_contains?: InputMaybe<Scalars['String']>;
        text_not_contains_nocase?: InputMaybe<Scalars['String']>;
        text_starts_with?: InputMaybe<Scalars['String']>;
        text_starts_with_nocase?: InputMaybe<Scalars['String']>;
        text_not_starts_with?: InputMaybe<Scalars['String']>;
        text_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
        text_ends_with?: InputMaybe<Scalars['String']>;
        text_ends_with_nocase?: InputMaybe<Scalars['String']>;
        text_not_ends_with?: InputMaybe<Scalars['String']>;
        text_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
        hypercerts_?: InputMaybe<Hypercert_filter>;
        _change_block?: InputMaybe<BlockChangedFilter>;
    };
    type ImpactScope_orderBy = 'id' | 'text' | 'hypercerts';
    type OrderDirection = 'asc' | 'desc';
    type Owner = {
        id: Scalars['ID'];
    };
    type Owner_filter = {
        id?: InputMaybe<Scalars['ID']>;
        id_not?: InputMaybe<Scalars['ID']>;
        id_gt?: InputMaybe<Scalars['ID']>;
        id_lt?: InputMaybe<Scalars['ID']>;
        id_gte?: InputMaybe<Scalars['ID']>;
        id_lte?: InputMaybe<Scalars['ID']>;
        id_in?: InputMaybe<Array<Scalars['ID']>>;
        id_not_in?: InputMaybe<Array<Scalars['ID']>>;
        _change_block?: InputMaybe<BlockChangedFilter>;
    };
    type Owner_orderBy = 'id';
    type Query = {
        contributor?: Maybe<Contributor>;
        contributors: Array<Contributor>;
        owner?: Maybe<Owner>;
        owners: Array<Owner>;
        hypercert?: Maybe<Hypercert>;
        hypercerts: Array<Hypercert>;
        hypercertFraction?: Maybe<HypercertFraction>;
        hypercertFractions: Array<HypercertFraction>;
        impactScope?: Maybe<ImpactScope>;
        impactScopes: Array<ImpactScope>;
        workScope?: Maybe<WorkScope>;
        workScopes: Array<WorkScope>;
        right?: Maybe<Right>;
        rights: Array<Right>;
        _meta?: Maybe<_Meta_>;
    };
    type QuerycontributorArgs = {
        id: Scalars['ID'];
        block?: InputMaybe<Block_height>;
        subgraphError?: _SubgraphErrorPolicy_;
    };
    type QuerycontributorsArgs = {
        skip?: InputMaybe<Scalars['Int']>;
        first?: InputMaybe<Scalars['Int']>;
        orderBy?: InputMaybe<Contributor_orderBy>;
        orderDirection?: InputMaybe<OrderDirection>;
        where?: InputMaybe<Contributor_filter>;
        block?: InputMaybe<Block_height>;
        subgraphError?: _SubgraphErrorPolicy_;
    };
    type QueryownerArgs = {
        id: Scalars['ID'];
        block?: InputMaybe<Block_height>;
        subgraphError?: _SubgraphErrorPolicy_;
    };
    type QueryownersArgs = {
        skip?: InputMaybe<Scalars['Int']>;
        first?: InputMaybe<Scalars['Int']>;
        orderBy?: InputMaybe<Owner_orderBy>;
        orderDirection?: InputMaybe<OrderDirection>;
        where?: InputMaybe<Owner_filter>;
        block?: InputMaybe<Block_height>;
        subgraphError?: _SubgraphErrorPolicy_;
    };
    type QueryhypercertArgs = {
        id: Scalars['ID'];
        block?: InputMaybe<Block_height>;
        subgraphError?: _SubgraphErrorPolicy_;
    };
    type QueryhypercertsArgs = {
        skip?: InputMaybe<Scalars['Int']>;
        first?: InputMaybe<Scalars['Int']>;
        orderBy?: InputMaybe<Hypercert_orderBy>;
        orderDirection?: InputMaybe<OrderDirection>;
        where?: InputMaybe<Hypercert_filter>;
        block?: InputMaybe<Block_height>;
        subgraphError?: _SubgraphErrorPolicy_;
    };
    type QueryhypercertFractionArgs = {
        id: Scalars['ID'];
        block?: InputMaybe<Block_height>;
        subgraphError?: _SubgraphErrorPolicy_;
    };
    type QueryhypercertFractionsArgs = {
        skip?: InputMaybe<Scalars['Int']>;
        first?: InputMaybe<Scalars['Int']>;
        orderBy?: InputMaybe<HypercertFraction_orderBy>;
        orderDirection?: InputMaybe<OrderDirection>;
        where?: InputMaybe<HypercertFraction_filter>;
        block?: InputMaybe<Block_height>;
        subgraphError?: _SubgraphErrorPolicy_;
    };
    type QueryimpactScopeArgs = {
        id: Scalars['ID'];
        block?: InputMaybe<Block_height>;
        subgraphError?: _SubgraphErrorPolicy_;
    };
    type QueryimpactScopesArgs = {
        skip?: InputMaybe<Scalars['Int']>;
        first?: InputMaybe<Scalars['Int']>;
        orderBy?: InputMaybe<ImpactScope_orderBy>;
        orderDirection?: InputMaybe<OrderDirection>;
        where?: InputMaybe<ImpactScope_filter>;
        block?: InputMaybe<Block_height>;
        subgraphError?: _SubgraphErrorPolicy_;
    };
    type QueryworkScopeArgs = {
        id: Scalars['ID'];
        block?: InputMaybe<Block_height>;
        subgraphError?: _SubgraphErrorPolicy_;
    };
    type QueryworkScopesArgs = {
        skip?: InputMaybe<Scalars['Int']>;
        first?: InputMaybe<Scalars['Int']>;
        orderBy?: InputMaybe<WorkScope_orderBy>;
        orderDirection?: InputMaybe<OrderDirection>;
        where?: InputMaybe<WorkScope_filter>;
        block?: InputMaybe<Block_height>;
        subgraphError?: _SubgraphErrorPolicy_;
    };
    type QueryrightArgs = {
        id: Scalars['ID'];
        block?: InputMaybe<Block_height>;
        subgraphError?: _SubgraphErrorPolicy_;
    };
    type QueryrightsArgs = {
        skip?: InputMaybe<Scalars['Int']>;
        first?: InputMaybe<Scalars['Int']>;
        orderBy?: InputMaybe<Right_orderBy>;
        orderDirection?: InputMaybe<OrderDirection>;
        where?: InputMaybe<Right_filter>;
        block?: InputMaybe<Block_height>;
        subgraphError?: _SubgraphErrorPolicy_;
    };
    type Query_metaArgs = {
        block?: InputMaybe<Block_height>;
    };
    type Right = {
        id: Scalars['ID'];
        text: Scalars['String'];
        hypercerts: Array<Hypercert>;
    };
    type RighthypercertsArgs = {
        skip?: InputMaybe<Scalars['Int']>;
        first?: InputMaybe<Scalars['Int']>;
        orderBy?: InputMaybe<Hypercert_orderBy>;
        orderDirection?: InputMaybe<OrderDirection>;
        where?: InputMaybe<Hypercert_filter>;
    };
    type Right_filter = {
        id?: InputMaybe<Scalars['ID']>;
        id_not?: InputMaybe<Scalars['ID']>;
        id_gt?: InputMaybe<Scalars['ID']>;
        id_lt?: InputMaybe<Scalars['ID']>;
        id_gte?: InputMaybe<Scalars['ID']>;
        id_lte?: InputMaybe<Scalars['ID']>;
        id_in?: InputMaybe<Array<Scalars['ID']>>;
        id_not_in?: InputMaybe<Array<Scalars['ID']>>;
        text?: InputMaybe<Scalars['String']>;
        text_not?: InputMaybe<Scalars['String']>;
        text_gt?: InputMaybe<Scalars['String']>;
        text_lt?: InputMaybe<Scalars['String']>;
        text_gte?: InputMaybe<Scalars['String']>;
        text_lte?: InputMaybe<Scalars['String']>;
        text_in?: InputMaybe<Array<Scalars['String']>>;
        text_not_in?: InputMaybe<Array<Scalars['String']>>;
        text_contains?: InputMaybe<Scalars['String']>;
        text_contains_nocase?: InputMaybe<Scalars['String']>;
        text_not_contains?: InputMaybe<Scalars['String']>;
        text_not_contains_nocase?: InputMaybe<Scalars['String']>;
        text_starts_with?: InputMaybe<Scalars['String']>;
        text_starts_with_nocase?: InputMaybe<Scalars['String']>;
        text_not_starts_with?: InputMaybe<Scalars['String']>;
        text_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
        text_ends_with?: InputMaybe<Scalars['String']>;
        text_ends_with_nocase?: InputMaybe<Scalars['String']>;
        text_not_ends_with?: InputMaybe<Scalars['String']>;
        text_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
        hypercerts_?: InputMaybe<Hypercert_filter>;
        _change_block?: InputMaybe<BlockChangedFilter>;
    };
    type Right_orderBy = 'id' | 'text' | 'hypercerts';
    type Subscription = {
        contributor?: Maybe<Contributor>;
        contributors: Array<Contributor>;
        owner?: Maybe<Owner>;
        owners: Array<Owner>;
        hypercert?: Maybe<Hypercert>;
        hypercerts: Array<Hypercert>;
        hypercertFraction?: Maybe<HypercertFraction>;
        hypercertFractions: Array<HypercertFraction>;
        impactScope?: Maybe<ImpactScope>;
        impactScopes: Array<ImpactScope>;
        workScope?: Maybe<WorkScope>;
        workScopes: Array<WorkScope>;
        right?: Maybe<Right>;
        rights: Array<Right>;
        _meta?: Maybe<_Meta_>;
    };
    type SubscriptioncontributorArgs = {
        id: Scalars['ID'];
        block?: InputMaybe<Block_height>;
        subgraphError?: _SubgraphErrorPolicy_;
    };
    type SubscriptioncontributorsArgs = {
        skip?: InputMaybe<Scalars['Int']>;
        first?: InputMaybe<Scalars['Int']>;
        orderBy?: InputMaybe<Contributor_orderBy>;
        orderDirection?: InputMaybe<OrderDirection>;
        where?: InputMaybe<Contributor_filter>;
        block?: InputMaybe<Block_height>;
        subgraphError?: _SubgraphErrorPolicy_;
    };
    type SubscriptionownerArgs = {
        id: Scalars['ID'];
        block?: InputMaybe<Block_height>;
        subgraphError?: _SubgraphErrorPolicy_;
    };
    type SubscriptionownersArgs = {
        skip?: InputMaybe<Scalars['Int']>;
        first?: InputMaybe<Scalars['Int']>;
        orderBy?: InputMaybe<Owner_orderBy>;
        orderDirection?: InputMaybe<OrderDirection>;
        where?: InputMaybe<Owner_filter>;
        block?: InputMaybe<Block_height>;
        subgraphError?: _SubgraphErrorPolicy_;
    };
    type SubscriptionhypercertArgs = {
        id: Scalars['ID'];
        block?: InputMaybe<Block_height>;
        subgraphError?: _SubgraphErrorPolicy_;
    };
    type SubscriptionhypercertsArgs = {
        skip?: InputMaybe<Scalars['Int']>;
        first?: InputMaybe<Scalars['Int']>;
        orderBy?: InputMaybe<Hypercert_orderBy>;
        orderDirection?: InputMaybe<OrderDirection>;
        where?: InputMaybe<Hypercert_filter>;
        block?: InputMaybe<Block_height>;
        subgraphError?: _SubgraphErrorPolicy_;
    };
    type SubscriptionhypercertFractionArgs = {
        id: Scalars['ID'];
        block?: InputMaybe<Block_height>;
        subgraphError?: _SubgraphErrorPolicy_;
    };
    type SubscriptionhypercertFractionsArgs = {
        skip?: InputMaybe<Scalars['Int']>;
        first?: InputMaybe<Scalars['Int']>;
        orderBy?: InputMaybe<HypercertFraction_orderBy>;
        orderDirection?: InputMaybe<OrderDirection>;
        where?: InputMaybe<HypercertFraction_filter>;
        block?: InputMaybe<Block_height>;
        subgraphError?: _SubgraphErrorPolicy_;
    };
    type SubscriptionimpactScopeArgs = {
        id: Scalars['ID'];
        block?: InputMaybe<Block_height>;
        subgraphError?: _SubgraphErrorPolicy_;
    };
    type SubscriptionimpactScopesArgs = {
        skip?: InputMaybe<Scalars['Int']>;
        first?: InputMaybe<Scalars['Int']>;
        orderBy?: InputMaybe<ImpactScope_orderBy>;
        orderDirection?: InputMaybe<OrderDirection>;
        where?: InputMaybe<ImpactScope_filter>;
        block?: InputMaybe<Block_height>;
        subgraphError?: _SubgraphErrorPolicy_;
    };
    type SubscriptionworkScopeArgs = {
        id: Scalars['ID'];
        block?: InputMaybe<Block_height>;
        subgraphError?: _SubgraphErrorPolicy_;
    };
    type SubscriptionworkScopesArgs = {
        skip?: InputMaybe<Scalars['Int']>;
        first?: InputMaybe<Scalars['Int']>;
        orderBy?: InputMaybe<WorkScope_orderBy>;
        orderDirection?: InputMaybe<OrderDirection>;
        where?: InputMaybe<WorkScope_filter>;
        block?: InputMaybe<Block_height>;
        subgraphError?: _SubgraphErrorPolicy_;
    };
    type SubscriptionrightArgs = {
        id: Scalars['ID'];
        block?: InputMaybe<Block_height>;
        subgraphError?: _SubgraphErrorPolicy_;
    };
    type SubscriptionrightsArgs = {
        skip?: InputMaybe<Scalars['Int']>;
        first?: InputMaybe<Scalars['Int']>;
        orderBy?: InputMaybe<Right_orderBy>;
        orderDirection?: InputMaybe<OrderDirection>;
        where?: InputMaybe<Right_filter>;
        block?: InputMaybe<Block_height>;
        subgraphError?: _SubgraphErrorPolicy_;
    };
    type Subscription_metaArgs = {
        block?: InputMaybe<Block_height>;
    };
    type WorkScope = {
        id: Scalars['ID'];
        text: Scalars['String'];
        hypercerts: Array<Hypercert>;
    };
    type WorkScopehypercertsArgs = {
        skip?: InputMaybe<Scalars['Int']>;
        first?: InputMaybe<Scalars['Int']>;
        orderBy?: InputMaybe<Hypercert_orderBy>;
        orderDirection?: InputMaybe<OrderDirection>;
        where?: InputMaybe<Hypercert_filter>;
    };
    type WorkScope_filter = {
        id?: InputMaybe<Scalars['ID']>;
        id_not?: InputMaybe<Scalars['ID']>;
        id_gt?: InputMaybe<Scalars['ID']>;
        id_lt?: InputMaybe<Scalars['ID']>;
        id_gte?: InputMaybe<Scalars['ID']>;
        id_lte?: InputMaybe<Scalars['ID']>;
        id_in?: InputMaybe<Array<Scalars['ID']>>;
        id_not_in?: InputMaybe<Array<Scalars['ID']>>;
        text?: InputMaybe<Scalars['String']>;
        text_not?: InputMaybe<Scalars['String']>;
        text_gt?: InputMaybe<Scalars['String']>;
        text_lt?: InputMaybe<Scalars['String']>;
        text_gte?: InputMaybe<Scalars['String']>;
        text_lte?: InputMaybe<Scalars['String']>;
        text_in?: InputMaybe<Array<Scalars['String']>>;
        text_not_in?: InputMaybe<Array<Scalars['String']>>;
        text_contains?: InputMaybe<Scalars['String']>;
        text_contains_nocase?: InputMaybe<Scalars['String']>;
        text_not_contains?: InputMaybe<Scalars['String']>;
        text_not_contains_nocase?: InputMaybe<Scalars['String']>;
        text_starts_with?: InputMaybe<Scalars['String']>;
        text_starts_with_nocase?: InputMaybe<Scalars['String']>;
        text_not_starts_with?: InputMaybe<Scalars['String']>;
        text_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
        text_ends_with?: InputMaybe<Scalars['String']>;
        text_ends_with_nocase?: InputMaybe<Scalars['String']>;
        text_not_ends_with?: InputMaybe<Scalars['String']>;
        text_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
        hypercerts_?: InputMaybe<Hypercert_filter>;
        _change_block?: InputMaybe<BlockChangedFilter>;
    };
    type WorkScope_orderBy = 'id' | 'text' | 'hypercerts';
    type _Block_ = {
        hash?: Maybe<Scalars['Bytes']>;
        number: Scalars['Int'];
        timestamp?: Maybe<Scalars['Int']>;
    };
    type _Meta_ = {
        block: _Block_;
        deployment: Scalars['String'];
        hasIndexingErrors: Scalars['Boolean'];
    };
    type _SubgraphErrorPolicy_ = 'allow' | 'deny';
    type QuerySdk = {
        contributor: InContextSdkMethod<Query['contributor'], QuerycontributorArgs, MeshContext>;
        contributors: InContextSdkMethod<Query['contributors'], QuerycontributorsArgs, MeshContext>;
        owner: InContextSdkMethod<Query['owner'], QueryownerArgs, MeshContext>;
        owners: InContextSdkMethod<Query['owners'], QueryownersArgs, MeshContext>;
        hypercert: InContextSdkMethod<Query['hypercert'], QueryhypercertArgs, MeshContext>;
        hypercerts: InContextSdkMethod<Query['hypercerts'], QueryhypercertsArgs, MeshContext>;
        hypercertFraction: InContextSdkMethod<Query['hypercertFraction'], QueryhypercertFractionArgs, MeshContext>;
        hypercertFractions: InContextSdkMethod<Query['hypercertFractions'], QueryhypercertFractionsArgs, MeshContext>;
        impactScope: InContextSdkMethod<Query['impactScope'], QueryimpactScopeArgs, MeshContext>;
        impactScopes: InContextSdkMethod<Query['impactScopes'], QueryimpactScopesArgs, MeshContext>;
        workScope: InContextSdkMethod<Query['workScope'], QueryworkScopeArgs, MeshContext>;
        workScopes: InContextSdkMethod<Query['workScopes'], QueryworkScopesArgs, MeshContext>;
        right: InContextSdkMethod<Query['right'], QueryrightArgs, MeshContext>;
        rights: InContextSdkMethod<Query['rights'], QueryrightsArgs, MeshContext>;
        _meta: InContextSdkMethod<Query['_meta'], Query_metaArgs, MeshContext>;
    };
    type MutationSdk = {};
    type SubscriptionSdk = {
        contributor: InContextSdkMethod<Subscription['contributor'], SubscriptioncontributorArgs, MeshContext>;
        contributors: InContextSdkMethod<Subscription['contributors'], SubscriptioncontributorsArgs, MeshContext>;
        owner: InContextSdkMethod<Subscription['owner'], SubscriptionownerArgs, MeshContext>;
        owners: InContextSdkMethod<Subscription['owners'], SubscriptionownersArgs, MeshContext>;
        hypercert: InContextSdkMethod<Subscription['hypercert'], SubscriptionhypercertArgs, MeshContext>;
        hypercerts: InContextSdkMethod<Subscription['hypercerts'], SubscriptionhypercertsArgs, MeshContext>;
        hypercertFraction: InContextSdkMethod<Subscription['hypercertFraction'], SubscriptionhypercertFractionArgs, MeshContext>;
        hypercertFractions: InContextSdkMethod<Subscription['hypercertFractions'], SubscriptionhypercertFractionsArgs, MeshContext>;
        impactScope: InContextSdkMethod<Subscription['impactScope'], SubscriptionimpactScopeArgs, MeshContext>;
        impactScopes: InContextSdkMethod<Subscription['impactScopes'], SubscriptionimpactScopesArgs, MeshContext>;
        workScope: InContextSdkMethod<Subscription['workScope'], SubscriptionworkScopeArgs, MeshContext>;
        workScopes: InContextSdkMethod<Subscription['workScopes'], SubscriptionworkScopesArgs, MeshContext>;
        right: InContextSdkMethod<Subscription['right'], SubscriptionrightArgs, MeshContext>;
        rights: InContextSdkMethod<Subscription['rights'], SubscriptionrightsArgs, MeshContext>;
        _meta: InContextSdkMethod<Subscription['_meta'], Subscription_metaArgs, MeshContext>;
    };
    type Context = {
        ["hypercerts-goerli"]: {
            Query: QuerySdk;
            Mutation: MutationSdk;
            Subscription: SubscriptionSdk;
        };
    };
}
//# sourceMappingURL=types.d.ts.map